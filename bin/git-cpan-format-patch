#!perl

use strict;
use warnings;

use autodie;

use Git::Repository;

use Getopt::Long;
use Pod::Usage;

sub say (@) { print @_, "\n" }

my %opt;
GetOptions( \%opt, 
    'help' => sub { pod2usage(1) },
    'man'  => sub { pod2usage( verbose => 2 ) },
) 
    or pod2usage( 
        "for a list of all valid options, do 'git cpan-format-patch --help'" 
    );

print Git::Repository->new->run('format-patch', 'cpan/master');

__END__

=pod

=head1 NAME

git-cpan-format-patch - Format patches using C<cpan/master> as the origin
reference

=head1 SYNOPSIS

    % git cpan-format-patch

=head1 DESCRIPTION

This is just like running C<git format-patch cpan/master>.

=head1 BUGS AND LIMITATIONS

Please report any bugs or feature requests to
C<bug-git-cpan-patch@rt.cpan.org>, or through the web 
interface at L<http://rt.cpan.org>.
  
=head1 AUTHORS

Yuval Kogman C<< <nothingmuch@woobling.org> >>

Yanick Champoux C<< <yanick@cpan.org> >>

=head1 LICENCE

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

=head1 SEE ALSO

L<Git::CPAN::Patch>

L<git-format-patch>

=cut
